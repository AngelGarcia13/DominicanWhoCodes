@page "/"
@inject HttpClient Http
@using DWC.Blazor.Extensions
@using DWC.Blazor.Utils

<div class="row">
    @if (isLoading)
    {
        <div class="col-12 text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-3"><em>Loading devs info...</em></p>
        </div>
    }
    else if (filteredDevelopers == null || !filteredDevelopers.Any())
    {
        <div class="col-12">
            <div class="alert alert-info" role="alert">
                No developers found.
            </div>
        </div>
    }
    else
    {
        <!-- Filter and Sort Controls -->
        <div class="col-12 mb-4">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="font-weight-bold">Filter by Skill:</label>
                    <select class="form-control" @bind="selectedSkill" @bind:after="FilterDevelopers">
                        <option value="">All Skills</option>
                        @foreach (var skill in allSkills.OrderBy(s => s))
                        {
                            <option value="@skill">@skill</option>
                        }
                    </select>
                </div>
                <div class="col-md-6 mb-3">
                    <label class="font-weight-bold">Sort by:</label>
                    <select class="form-control" @bind="sortOrder" @bind:after="SortDevelopers">
                        <option value="random">Random</option>
                        <option value="name-asc">Name (A-Z)</option>
                        <option value="name-desc">Name (Z-A)</option>
                    </select>
                </div>
            </div>
            <div class="text-muted">
                <small>Showing @filteredDevelopers.Count() of @developers.Length developers</small>
            </div>
        </div>

        <!-- Developer Cards -->
        @foreach (var developer in filteredDevelopers)
        {
            <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
                <CardComponent
                    Name="@developer.Name"
                    Initials="@developer.Initials"
                    Image="@developer.Image"
                    Summary="@developer.Summary"
                    Skills="@developer.Skills"
                    Webpage="@developer.Webpage"
                    LinkedIn="@developer.LinkedIn"
                    Twitter="@developer.Twitter"
                    Github="@developer.Github" 
                    Telegram="@developer.Telegram"
                    StackOverflow="@developer.StackOverflow"
                    Medium="@developer.Medium"
                    YouTube="@developer.YouTube" />
            </div>
        }
    }
</div>

@code {
    private Developer[] developers;
    private IEnumerable<Developer> filteredDevelopers;
    private HashSet<string> allSkills = new HashSet<string>();
    
    private bool isLoading = true;
    private string selectedSkill = string.Empty;
    private string sortOrder = "random";

    protected override async Task OnInitializedAsync()
    {
        await LoadDevelopers();
    }

    private async Task LoadDevelopers()
    {
        try
        {
            isLoading = true;
            developers = await Http.GetFromJsonAsync<Developer[]>("data/developers.json");
            
            if (developers != null && developers.Length > 0)
            {
                ExtractAllSkills();
                
                developers = developers.Shuffle().ToArray();
                filteredDevelopers = developers;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading developers: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ExtractAllSkills()
    {
        allSkills.Clear();
        foreach (var dev in developers)
        {
            var normalizedSkills = SkillNormalizer.NormalizeSkills(dev.Skills);
            foreach (var skill in normalizedSkills)
            {
                allSkills.Add(skill);
            }
        }
    }

    private void FilterDevelopers()
    {
        var query = developers.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(selectedSkill))
        {
            query = query.Where(d => 
            {
                var devSkills = SkillNormalizer.NormalizeSkills(d.Skills);
                return devSkills.Contains(selectedSkill, StringComparer.OrdinalIgnoreCase);
            });
        }

        filteredDevelopers = query.ToList();
        SortDevelopers();
    }

    private void SortDevelopers()
    {
        filteredDevelopers = sortOrder switch
        {
            "name-asc" => filteredDevelopers.OrderBy(d => d.Name),
            "name-desc" => filteredDevelopers.OrderByDescending(d => d.Name),
            "random" => filteredDevelopers.Shuffle(),
            _ => filteredDevelopers
        };
    }

    public class Developer
    {
        public string Name { get; set; }
        public string Initials { get; set; }
        public string Image { get; set; }
        public string Summary { get; set; }
        public string Skills { get; set; }
        public string Webpage { get; set; }
        public string LinkedIn { get; set; }
        public string Twitter { get; set; }
        public string Github { get; set; }
        public string Telegram { get; set; }
        public string StackOverflow { get; set; }
        public string Medium { get; set; }
        public string YouTube { get; set; }
    }
}
